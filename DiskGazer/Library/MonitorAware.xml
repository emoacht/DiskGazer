<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonitorAware</name>
    </assembly>
    <members>
        <member name="T:MonitorAware.Helper.BrushExtension">
            <summary>
            Extension method for <see cref="T:System.Windows.Media.Brush"/>
            </summary>
        </member>
        <member name="M:MonitorAware.Helper.BrushExtension.IsTransparent(System.Windows.Media.Brush)">
            <summary>
            Check if a Brush is Transparent.
            </summary>
            <param name="source">Source Brush</param>
            <returns>True if Transparent</returns>
        </member>
        <member name="T:MonitorAware.Helper.ColorExtension">
            <summary>
            Extension method for <see cref="T:System.Windows.Media.Color"/>
            </summary>
        </member>
        <member name="M:MonitorAware.Helper.ColorExtension.ToOpaque(System.Windows.Media.Color)">
            <summary>
            Convert a Color to an opaque Color using white background.
            </summary>
            <param name="source">Source Color</param>
            <returns>Opaque Color</returns>
        </member>
        <member name="M:MonitorAware.Helper.ColorExtension.ToBlended(System.Windows.Media.Color,System.Windows.Media.Color,System.Double)">
            <summary>
            Convert two Colors to a blended Color ignoring alpha channel.
            </summary>
            <param name="source">Source Color</param>
            <param name="target">Target Color</param>
            <param name="targetPerc">Percentage of target Color</param>
            <returns>Blended Color</returns>
            <remarks>Alpha channels of both Colors will be ignored.</remarks>
        </member>
        <member name="M:MonitorAware.Helper.ColorExtension.BlendColor(System.Windows.Media.Color,System.Windows.Media.Color,System.Double)">
            <summary>
            Blend two Colors.
            </summary>
            <param name="color1">1st Color</param>
            <param name="color2">2nd Color</param>
            <param name="color2Perc">Percentage of 2nd Color</param>
            <returns>Blended Color</returns>
            <remarks>Alpha channels of both Colors will be ignored.</remarks>
        </member>
        <member name="T:MonitorAware.Helper.DoubleExtension">
            <summary>
            Extension method for <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="M:MonitorAware.Helper.DoubleExtension.ToRounded(System.Double,System.Double)">
            <summary>
            Convert a double to a preliminarily rounded double to prevent a FrameworkElement from getting blurred by ScaleTransform.
            </summary>
            <param name="source">Source double</param>
            <param name="factor">Factor of ScaleTransform</param>
            <returns>Rounded double</returns>
        </member>
        <member name="T:MonitorAware.Helper.EnumAddition">
            <summary>
            Additional method for <see cref="T:System.Enum"/>
            </summary>
        </member>
        <member name="M:MonitorAware.Helper.EnumAddition.IsDefined(System.Type,System.String,System.StringComparison)">
            <summary>
            Check if a specified string exists in the names of a specified Enum.
            </summary>
            <param name="enumType">Enum type</param>
            <param name="value">Source string</param>
            <param name="comparisonType">StringComparison option</param>
            <returns>True if exists</returns>
            <remarks>This method acts as Enum.IsDefined method added with StringComparison option.</remarks>
        </member>
        <member name="M:MonitorAware.Helper.EnumAddition.Parse(System.Type,System.String,System.StringComparison)">
            <summary>
            Convert a specified string to the equivalent object of a specified Enum.
            </summary>
            <param name="enumType">Enum type</param>
            <param name="value">Source string</param>
            <param name="comparisonType">StringComparison option</param>
            <returns>Result object of Enum</returns>
            <remarks>This method acts as Enum.Parse method added with StringComparison option.</remarks>
        </member>
        <member name="M:MonitorAware.Helper.EnumAddition.TryParse``1(System.String,``0@,System.StringComparison)">
            <summary>
            Convert a specified string to the equivalent object of a specified Enum.
            </summary>
            <typeparam name="TEnum">Enum type</typeparam>
            <param name="value">Source string</param>
            <param name="result">Result object of Enum</param>
            <param name="comparisonType">StringComparison option</param>
            <returns>True if converted successfully</returns>
            <remarks>This method acts as Enum.TryParse method added with StringComparison option.</remarks>
        </member>
        <member name="T:MonitorAware.Helper.OsVersion">
            <summary>
            OS version information
            </summary>
        </member>
        <member name="P:MonitorAware.Helper.OsVersion.IsVistaOrNewer">
            <summary>
            Whether OS is Windows Vista or newer
            </summary>
            <remarks>Windows Vista = version 6.0</remarks>
        </member>
        <member name="P:MonitorAware.Helper.OsVersion.IsEightOrNewer">
            <summary>
            Whether OS is Windows 8 or newer
            </summary>
            <remarks>Windows 8 = version 6.2</remarks>
        </member>
        <member name="P:MonitorAware.Helper.OsVersion.IsEightOneOrNewer">
            <summary>
            Whether OS is Windows 8.1 or newer
            </summary>
            <remarks>Windows 8.1 = version 6.3</remarks>
        </member>
        <member name="T:MonitorAware.Helper.ResourceExtension">
            <summary>
            Extension method for <see cref="T:System.Windows.FrameworkElement"/> to manage resources
            </summary>
        </member>
        <member name="M:MonitorAware.Helper.ResourceExtension.ApplyResource(System.Windows.Application,System.String,System.String)">
            <summary>
            Add/Remove resources to/from <see cref="T:System.Windows.Application"/> resources.
            </summary>
            <param name="app">Target Application</param>
            <param name="newUriString">Uri string of new resources to be added</param>
            <param name="oldUriString">Uri string of old resources to be removed (case-sensitive)</param>
        </member>
        <member name="M:MonitorAware.Helper.ResourceExtension.ApplyResource(System.Windows.Controls.ContentControl,System.String,System.String)">
            <summary>
            Add/Remove resources to/from <see cref="T:System.Windows.Controls.ContentControl"/> resources.
            </summary>
            <param name="control">Target ContentControl</param>
            <param name="newUriString">Uri string of new resources to be added</param>
            <param name="oldUriString">Uri string of old resources to be removed (case-sensitive)</param>
        </member>
        <member name="T:MonitorAware.Helper.WindowChromeColor">
            <summary>
            Window chrome color information
            </summary>
        </member>
        <member name="M:MonitorAware.Helper.WindowChromeColor.GetChromeColor">
            <summary>
            Get OS's window chrome color.
            </summary>
            <returns>Window chrome color</returns>
            <remarks>This method is intended to get window chrome color of Windows 8 or newer.</remarks>
        </member>
        <member name="T:MonitorAware.Models.ColorProfileChangedEventArgs">
            <summary>
            Color profile changed event args
            </summary>
        </member>
        <member name="P:MonitorAware.Models.ColorProfileChangedEventArgs.OldPath">
            <summary>
            Old color profile path
            </summary>
        </member>
        <member name="P:MonitorAware.Models.ColorProfileChangedEventArgs.NewPath">
            <summary>
            New color profile path
            </summary>
        </member>
        <member name="M:MonitorAware.Models.ColorProfileChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="oldPath">Old color profile path</param>
            <param name="newPath">New color profile path</param>
        </member>
        <member name="T:MonitorAware.Models.ColorProfileChecker">
            <summary>
            Check color profile.
            </summary>
        </member>
        <member name="M:MonitorAware.Models.ColorProfileChecker.GetColorProfilePath(System.Windows.Media.Visual)">
            <summary>
            Get color profile file path used by the monitor to which a specified Window belongs.
            </summary>
            <param name="sourceVisual">Source Window</param>
            <returns>Color profile file path</returns>
        </member>
        <member name="T:MonitorAware.Models.Dpi">
            <summary>
            DPI information
            </summary>
            <remarks>
            This structure is based on the same structure of https://github.com/Grabacr07/XamClaudia
            </remarks>
        </member>
        <member name="F:MonitorAware.Models.Dpi.Default">
            <summary>
            Default DPI
            </summary>
        </member>
        <member name="P:MonitorAware.Models.Dpi.X">
            <summary>
            X-axis value of DPI
            </summary>
        </member>
        <member name="P:MonitorAware.Models.Dpi.Y">
            <summary>
            Y-axis value of DPI
            </summary>
        </member>
        <member name="M:MonitorAware.Models.Dpi.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="x">X-axis value</param>
            <param name="y">Y-axis value</param>
        </member>
        <member name="M:MonitorAware.Models.Dpi.op_Equality(MonitorAware.Models.Dpi,MonitorAware.Models.Dpi)">
            <summary>
            == Operator
            </summary>
            <param name="dpi1">Instance to compare</param>
            <param name="dpi2">Instance to compare</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:MonitorAware.Models.Dpi.op_Inequality(MonitorAware.Models.Dpi,MonitorAware.Models.Dpi)">
            <summary>
            != Operator
            </summary>
            <param name="dpi1">Instance to compare</param>
            <param name="dpi2">Instance to compare</param>
            <returns>True if not equal</returns>
        </member>
        <member name="M:MonitorAware.Models.Dpi.Equals(MonitorAware.Models.Dpi)">
            <summary>
            Equals operator
            </summary>
            <param name="other">Other instance to compare</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:MonitorAware.Models.Dpi.Equals(System.Object)">
            <summary>
            Equals operator
            </summary>
            <param name="other">Other instance to compare</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:MonitorAware.Models.Dpi.GetHashCode">
            <summary>
            Get hash code.
            </summary>
            <returns>Hash code for this structure</returns>
        </member>
        <member name="M:MonitorAware.Models.Dpi.ToString">
            <summary>
            Create string representation.
            </summary>
            <returns>String containing X and Y values of this structure</returns>
        </member>
        <member name="E:MonitorAware.Models.Dpi.PropertyChanged">
            <summary>
            PropertyChanged event
            </summary>
        </member>
        <member name="T:MonitorAware.Models.DpiChangedEventArgs">
            <summary>
            DPI changed event args
            </summary>
        </member>
        <member name="P:MonitorAware.Models.DpiChangedEventArgs.OldDpi">
            <summary>
            Old DPI
            </summary>
        </member>
        <member name="P:MonitorAware.Models.DpiChangedEventArgs.NewDpi">
            <summary>
            New DPI
            </summary>
        </member>
        <member name="M:MonitorAware.Models.DpiChangedEventArgs.#ctor(MonitorAware.Models.Dpi,MonitorAware.Models.Dpi)">
            <summary>
            Constructor
            </summary>
            <param name="oldDpi">Old DPI</param>
            <param name="newDpi">New DPI</param>
        </member>
        <member name="T:MonitorAware.Models.DpiChecker">
            <summary>
            Check DPI.
            </summary>
        </member>
        <member name="M:MonitorAware.Models.DpiChecker.IsPerMonitorDpiAware">
            <summary>
            Check if current process is Per-Monitor DPI aware.
            </summary>
            <returns>True if Per-Monitor DPI aware</returns>
        </member>
        <member name="M:MonitorAware.Models.DpiChecker.GetDpiAwareness">
            <summary>
            Get DPI awareness of current process.
            </summary>
            <returns>If succeeded, Nullable PROCESS_DPI_AWARENESS. If failed, null.</returns>
        </member>
        <member name="F:MonitorAware.Models.DpiChecker.SystemDpi">
            <summary>
            System DPI
            </summary>
            <remarks>System DPI will not change during run time.</remarks>
        </member>
        <member name="M:MonitorAware.Models.DpiChecker.GetSystemDpi(System.Windows.Media.Visual)">
            <summary>
            Get system DPI.
            </summary>
            <param name="sourceVisual">Source Visual</param>
            <returns>DPI struct</returns>
        </member>
        <member name="M:MonitorAware.Models.DpiChecker.GetSystemDpi">
            <summary>
            Get system DPI.
            </summary>
            <returns>DPI struct</returns>
        </member>
        <member name="M:MonitorAware.Models.DpiChecker.GetDpiFromVisual(System.Windows.Media.Visual)">
            <summary>
            Get Per-Monitor DPI of the monitor to which a specified Window belongs.
            </summary>
            <param name="sourceVisual">Source Visual</param>
            <returns>DPI struct</returns>
        </member>
        <member name="M:MonitorAware.Models.DpiChecker.GetDpiFromRect(System.Windows.Rect)">
            <summary>
            Get Per-Monitor DPI of the monitor to which a specified Rect belongs.
            </summary>
            <param name="sourceRect">Source Rect</param>
            <returns>DPI struct</returns>
        </member>
        <member name="M:MonitorAware.Models.DpiChecker.GetNotificationAreaDpi">
            <summary>
            Get Per-Monitor DPI of the monitor in which the notification area is contained.
            </summary>
            <returns>DPI struct</returns>
        </member>
        <member name="T:MonitorAware.Models.ExtendedWindowHandler">
            <summary>
            Handler for <see cref="T:MonitorAware.Views.ExtendedWindow"/>
            </summary>
        </member>
        <member name="E:MonitorAware.Models.ExtendedWindowHandler.WindowActivatedChanged">
            <summary>
            Window activated changed event
            </summary> 
            <remarks>
            Args true:  Window is being activated.
            Args false: Window is being deactivated.
            </remarks>
        </member>
        <member name="E:MonitorAware.Models.ExtendedWindowHandler.DwmColorizationColorChanged">
            <summary>
            DWM colorization color changed event
            </summary>
            <remarks>This event is fired when default Window chrome color is changed.</remarks>
        </member>
        <member name="M:MonitorAware.Models.ExtendedWindowHandler.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Handle window messages.
            </summary>
            <param name="hwnd">The window handle</param>
            <param name="msg">The message ID</param>
            <param name="wParam">The message's wParam value</param>
            <param name="lParam">The message's lParam value</param>
            <param name="handled">Whether the message was handled</param>
            <returns>Return value depending on the particular message</returns>
            <remarks>This is an implementation of System.Windows.Interop.HwndSourceHook.</remarks>
        </member>
        <member name="M:MonitorAware.Models.Win32.NativeMacro.GetLoWord(System.UInt32)">
            <summary>
            Equivalent to LOWORD
            </summary>
            <param name="dword">Dword (unit)</param>
            <returns>Low-order Word (ushort)</returns>
        </member>
        <member name="M:MonitorAware.Models.Win32.NativeMacro.GetHiWord(System.UInt32)">
            <summary>
            Equivalent to HIWORD
            </summary>
            <param name="dword">Dword (uint)</param>
            <returns>High-order Word (ushort)</returns>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.MONITOR_DEFAULTTO.MONITOR_DEFAULTTONULL">
            <summary>
            If no display monitor intersects, returns null.
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.MONITOR_DEFAULTTO.MONITOR_DEFAULTTOPRIMARY">
            <summary>
            If no display monitor intersects, returns a handle to the primary display monitor.
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.MONITOR_DEFAULTTO.MONITOR_DEFAULTTONEAREST">
            <summary>
            If no display monitor intersects, returns a handle to the display monitor that is nearest to the rectangle.
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.PROCESS_DPI_AWARENESS.Process_DPI_Unaware">
            <summary>
            Not DPI aware
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.PROCESS_DPI_AWARENESS.Process_System_DPI_Aware">
            <summary>
            System DPI aware
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.PROCESS_DPI_AWARENESS.Process_Per_Monitor_DPI_Aware">
            <summary>
            Per-Monitor DPI aware
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.MONITOR_DPI_TYPE.MDT_Effective_DPI">
            <summary>
            Effective DPI that incorporates accessibility overrides and matches what Desktop Window Manage (DWM) uses to scale desktop applications
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.MONITOR_DPI_TYPE.MDT_Angular_DPI">
            <summary>
            DPI that ensures rendering at a compliant angular resolution on the screen, without incorporating accessibility overrides
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.MONITOR_DPI_TYPE.MDT_Raw_DPI">
            <summary>
            Linear DPI of the screen as measured on the screen itself
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.MONITOR_DPI_TYPE.MDT_Default">
            <summary>
            Default DPI
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.WA_ACTIVE">
            <summary>
            Activated by some method other than a mouse click.
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.WA_CLICKACTIVE">
            <summary>
            Activated by a mouse click.
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.WA_INACTIVE">
            <summary>
            Deactivated.
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.SIZE_MAXHIDE">
            <summary>
            Some other window is maximized.
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.SIZE_MAXIMIZED">
            <summary>
            The window has been maximized.
            </summary> 
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.SIZE_MAXSHOW">
            <summary>
            Some other window has been restored to its former size.
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.SIZE_MINIMIZED">
            <summary>
            The window has been minimized.
            </summary>
        </member>
        <member name="F:MonitorAware.Models.Win32.NativeMethod.SIZE_RESTORED">
            <summary>
            The window has been resized, but neither the SIZE_MINIMIZED nor SIZE_MAXIMIZED value applies.
            </summary>
        </member>
        <member name="T:MonitorAware.Models.WindowHandler">
            <summary>
            Handler for <see cref="T:System.Windows.Window"/>
            </summary>
        </member>
        <member name="T:MonitorAware.Models.WindowHandler.WindowStatus">
            <summary>
            Status of a <see cref="T:System.Windows.Window"/>
            </summary>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler.WindowStatus.None">
            <summary>
            A Window stands still.
            </summary>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler.WindowStatus.LocationChanged">
            <summary>
            A Window's location is being changed.
            </summary>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler.WindowStatus.SizeChanged">
            <summary>
            A Window's size is being changed.
            </summary>
        </member>
        <member name="T:MonitorAware.Models.WindowHandler.WindowInfo">
            <summary>
            DPI and other information on a <see cref="T:System.Windows.Window"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Models.WindowHandler.IsPerMonitorDpiAware">
            <summary>
            Whether target Window is Per-Monitor DPI aware (readonly)
            </summary>
        </member>
        <member name="P:MonitorAware.Models.WindowHandler.SystemDpi">
            <summary>
            System DPI (readonly)
            </summary>
        </member>
        <member name="P:MonitorAware.Models.WindowHandler.MonitorDpi">
            <summary>
            Per-Monitor DPI of current monitor (public readonly)
            </summary>
            <remarks>This property cannot become a binding target because it has no public setter.</remarks>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler.MonitorDpiPropertyKey">
            <summary>
            Dependency property key for <see cref="P:MonitorAware.Models.WindowHandler.MonitorDpi"/>
            </summary>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler.MonitorDpiProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Models.WindowHandler.MonitorDpi"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Models.WindowHandler.WindowDpi">
            <summary>
            Per-Monitor DPI of target Window (public readonly)
            </summary>
            <remarks>This property cannot become a binding target because it has no public setter.</remarks>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler.WindowDpiPropertyKey">
            <summary>
            Dependency property key for <see cref="P:MonitorAware.Models.WindowHandler.WindowDpi"/>
            </summary>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler.WindowDpiProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Models.WindowHandler.WindowDpi"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Models.WindowHandler.ColorProfilePath">
            <summary>
            Color profile path of target Window (public readonly)
            </summary>
            <remarks>This property cannot become a binding target because it has no public setter.</remarks>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler.ColorProfilePathPropertyKey">
            <summary>
            Dependency property key for <see cref="P:MonitorAware.Models.WindowHandler.ColorProfilePath"/>
            </summary>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler.ColorProfilePathProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Models.WindowHandler.ColorProfilePath"/>
            </summary>
        </member>
        <member name="E:MonitorAware.Models.WindowHandler.DpiChanged">
            <summary>
            DPI changed event
            </summary>
            <remarks>This event is fired when DPI of target Window is changed. It is not necessarily the same timing
            when DPI of the monitor to which target Window belongs is changed.</remarks>
        </member>
        <member name="E:MonitorAware.Models.WindowHandler.ColorProfileChanged">
            <summary>
            Color profile path changed event
            </summary>
            <remarks>This event is fired when color profile path of the monitor to which target Window belongs has
            changed and Window's move/resize which caused the change has exited.</remarks>
        </member>
        <member name="M:MonitorAware.Models.WindowHandler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MonitorAware.Models.WindowHandler.#ctor(System.Windows.Window,System.Windows.FrameworkElement)">
            <summary>
            Constructor
            </summary>
            <param name="window">Target Window</param>
            <param name="element">Target FrameworkElement</param>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler._targetWindow">
            <summary>
            Target Window
            </summary>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler._targetElement">
            <summary>
            Target FrameworkElement which will be transformed when DPI changed
            </summary>
            <remarks>If this FrameworkElement is null, Window.Content will be transformed.</remarks>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler._targetSource">
            <summary>
            HwndSource of target Window
            </summary>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler._dueInfo">
            <summary>
            Information that target Window due to be
            </summary>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler._currentStatus">
            <summary>
            Current status of target Window
            </summary>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler._baseSize">
            <summary>
            Size of target Window to be the base for calculating due size when DPI changed 
            </summary>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler._isEnteredSizeMove">
            <summary>
            Whether target Window's location or size has started to be changed
            </summary>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler._isDpiChanged">
            <summary>
            Whether DPI has changed after target Window's location or size has started to be changed
            </summary>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler._countLocationChanged">
            <summary>
            Count of WM_MOVE messages
            </summary>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler._countSizeChanged">
            <summary>
            Count of WM_SIZE messages
            </summary>
        </member>
        <member name="M:MonitorAware.Models.WindowHandler.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Handle window messages.
            </summary>
            <param name="hwnd">The window handle</param>
            <param name="msg">The message ID</param>
            <param name="wParam">The message's wParam value</param>
            <param name="lParam">The message's lParam value</param>
            <param name="handled">Whether the message was handled</param>
            <returns>Return value depending on the particular message</returns>
            <remarks>This is an implementation of System.Windows.Interop.HwndSourceHook.</remarks>
        </member>
        <member name="F:MonitorAware.Models.WindowHandler._blocker">
            <summary>
            Object to block entering into change DPI process
            </summary>
            <remarks>
            Null:   Don't block.
            Object: Block.
            </remarks>
        </member>
        <member name="T:MonitorAware.Views.Controls.DrawingMaximizeIcon">
            <summary>
            Drawing maximize icon
            </summary>
        </member>
        <member name="M:MonitorAware.Views.Controls.DrawingMaximizeIcon.Draw(System.Windows.Media.DrawingContext,System.Double,System.Windows.Media.Brush)">
            <summary>
            Draw maximize icon.
            </summary>
            <param name="drawingContext">DrawingContext of canvas</param>
            <param name="factor">Factor from default DPI</param>
            <param name="foreground">Icon foreground Brush</param>
            <remarks>This drawing assumes that canvas size is 16x16 by default.</remarks>
        </member>
        <member name="T:MonitorAware.Views.Controls.DrawingRestoreIcon">
            <summary>
            Drawing restore icon
            </summary>
        </member>
        <member name="M:MonitorAware.Views.Controls.DrawingRestoreIcon.Draw(System.Windows.Media.DrawingContext,System.Double,System.Windows.Media.Brush)">
            <summary>
            Draw restore icon.
            </summary>
            <param name="drawingContext">DrawingContext of canvas</param>
            <param name="factor">Factor from default DPI</param>
            <param name="foreground">Icon foreground Brush</param>
            <remarks>This drawing assumes that canvas size is 16x16 by default.</remarks>
        </member>
        <member name="T:MonitorAware.Views.Controls.ExtendedCaptionButton">
            <summary>
            Caption button for <see cref="T:MonitorAware.Views.ExtendedWindow"/>
            </summary>
        </member>
        <member name="M:MonitorAware.Views.Controls.ExtendedCaptionButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MonitorAware.Views.Controls.ExtendedCaptionButton.OnInitialized(System.EventArgs)">
            <summary>
            OnInitialized
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:MonitorAware.Views.Controls.ExtendedCaptionButton.IsAboutActive">
            <summary>
            Whether the owner Window is about to be activated (internal)
            </summary>
            <remarks>
            <para>This property will be changed when the Window is about to be activated or deactivated.</para>
            <para>For binding only between code behind.</para>
            </remarks>
        </member>
        <member name="F:MonitorAware.Views.Controls.ExtendedCaptionButton.IsAboutActiveProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.Controls.ExtendedCaptionButton.IsAboutActive"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.Controls.ExtendedCaptionButton.NormalBackground">
            <summary>
            Caption button background Brush when the owner Window is activated
            </summary>
            <remarks>Default value (Transparent) is to make whole button area hit test visible.</remarks>
        </member>
        <member name="F:MonitorAware.Views.Controls.ExtendedCaptionButton.NormalBackgroundProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.Controls.ExtendedCaptionButton.NormalBackground"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.Controls.ExtendedCaptionButton.DeactivatedBackground">
            <summary>
            Caption button background Brush when the owner Window is deactivated
            </summary>
            <remarks>Default value (Transparent) is to make whole button area hit test visible.</remarks>
        </member>
        <member name="F:MonitorAware.Views.Controls.ExtendedCaptionButton.DeactivatedBackgroundProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.Controls.ExtendedCaptionButton.DeactivatedBackground"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.Controls.ExtendedCaptionButton.IconGeometry">
            <summary>
            Geometry for button icon
            </summary>
        </member>
        <member name="F:MonitorAware.Views.Controls.ExtendedCaptionButton.IconGeometryProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.Controls.ExtendedCaptionButton.IconGeometry"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.Controls.ExtendedCaptionButton.DrawingIcon">
            <summary>
            Drawing icon to be used by IconCanvas
            </summary>
        </member>
        <member name="F:MonitorAware.Views.Controls.ExtendedCaptionButton.DrawingIconProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.Controls.ExtendedCaptionButton.DrawingIcon"/>
            </summary>
        </member>
        <member name="T:MonitorAware.Views.Controls.IconCanvas">
            <summary>
            Canvas for drawing icon
            </summary>
            <remarks>Purpose of this canvas is to control icon shape regardless of DPI.</remarks>
        </member>
        <member name="M:MonitorAware.Views.Controls.IconCanvas.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MonitorAware.Views.Controls.IconCanvas.OnInitialized(System.EventArgs)">
            <summary>
            OnInitialized
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:MonitorAware.Views.Controls.IconCanvas.Foreground">
            <summary>
            Icon foreground Brush
            </summary>
            <remarks>Black by OS's default.</remarks>
        </member>
        <member name="F:MonitorAware.Views.Controls.IconCanvas.ForegroundProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.Controls.IconCanvas.Foreground"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.Controls.IconCanvas.DrawingIcon">
            <summary>
            Drawing icon
            </summary>
        </member>
        <member name="F:MonitorAware.Views.Controls.IconCanvas.DrawingIconProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.Controls.IconCanvas.DrawingIcon"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.Controls.IconCanvas.AncestorTransform">
            <summary>
            LayoutTransform of ancestor FrameworkElement
            </summary>
        </member>
        <member name="F:MonitorAware.Views.Controls.IconCanvas.AncestorTransformProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.Controls.IconCanvas.AncestorTransform"/>
            </summary>
        </member>
        <member name="M:MonitorAware.Views.Controls.IconCanvas.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            OnRender
            </summary>
            <param name="drawingContext"></param>
        </member>
        <member name="M:MonitorAware.Views.Controls.IconCanvas.Draw(System.Windows.Media.DrawingContext,System.Double,System.Windows.Media.Brush)">
            <summary>
            Draw fallback icon.
            </summary>
            <param name="drawingContext">DrawingContext of canvas</param>
            <param name="factor">Factor from default DPI</param>
            <param name="foreground">Icon foreground Brush</param>
        </member>
        <member name="T:MonitorAware.Views.Controls.IDrawingIcon">
            <summary>
            Interface for drawing icon
            </summary>
        </member>
        <member name="M:MonitorAware.Views.Controls.IDrawingIcon.Draw(System.Windows.Media.DrawingContext,System.Double,System.Windows.Media.Brush)">
            <summary>
            Draw icon.
            </summary>
            <param name="drawingContext">DrawingContext of canvas</param>
            <param name="factor">Factor from default DPI</param>
            <param name="foreground">Icon foreground Brush</param>
        </member>
        <member name="T:MonitorAware.Views.Controls.FrameworkElementCenterProperty">
            <summary>
            Attached property to locate inner <see cref="T:System.Windows.FrameworkElement"/> at the center of outer <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
        </member>
        <member name="M:MonitorAware.Views.Controls.FrameworkElementCenterProperty.GetAttachedProperty(System.Windows.FrameworkElement)">
            <summary>
            Get AttachedProperty.
            </summary>
            <param name="element">Owner <see cref="T:System.Windows.FrameworkElement"/></param>
            <returns>AttachedProperty</returns>
        </member>
        <member name="M:MonitorAware.Views.Controls.FrameworkElementCenterProperty.SetAttachedProperty(System.Windows.FrameworkElement,MonitorAware.Views.Controls.FrameworkElementCenterProperty)">
            <summary>
            Set AttachedProperty.
            </summary>
            <param name="element">Owner <see cref="T:System.Windows.FrameworkElement"/></param>
            <param name="attachedProperty">AttachedProperty</param>
        </member>
        <member name="F:MonitorAware.Views.Controls.FrameworkElementCenterProperty.AttachedPropertyProperty">
            <summary>
            Attached property for AttachedProperty
            </summary>
        </member>
        <member name="P:MonitorAware.Views.Controls.FrameworkElementCenterProperty.IsHorizontalAlignmentCenter">
            <summary>
            Whether inner <see cref="T:System.Windows.FrameworkElement"/> to be horizontally centered
            </summary>
        </member>
        <member name="P:MonitorAware.Views.Controls.FrameworkElementCenterProperty.IsVerticalAlignmentCenter">
            <summary>
            Whether inner <see cref="T:System.Windows.FrameworkElement"/> to be vertically centered
            </summary>
        </member>
        <member name="P:MonitorAware.Views.Controls.FrameworkElementCenterProperty.Rounding">
            <summary>
            Rounding
            </summary>
            <remarks>This string must be one of RoundingType names.</remarks>
        </member>
        <member name="T:MonitorAware.Views.Converters.DoubleMultiplyConverter">
            <summary>
            Convert double to multiplied double.
            </summary>
        </member>
        <member name="M:MonitorAware.Views.Converters.DoubleMultiplyConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert double to multiplied double.
            </summary>
            <param name="value">Source double</param>
            <param name="targetType"></param>
            <param name="parameter">Multiplier double</param>
            <param name="culture"></param>
            <returns>Multiplied double</returns>
        </member>
        <member name="M:MonitorAware.Views.Converters.DoubleMultiplyConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert double to divided double.
            </summary>
            <param name="value">Source double</param>
            <param name="targetType"></param>
            <param name="parameter">Divider double</param>
            <param name="culture"></param>
            <returns>Divided double</returns>
        </member>
        <member name="T:MonitorAware.Views.Converters.DoubleSumConverter">
            <summary>
            Convert doubles to summed double.
            </summary>
        </member>
        <member name="M:MonitorAware.Views.Converters.DoubleSumConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert doubles to summed double.
            </summary>
            <param name="values">Source doubles</param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns>Sum of doubles</returns>
        </member>
        <member name="M:MonitorAware.Views.Converters.DoubleSumConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:MonitorAware.Views.Converters.ObjectToVisibilityConverter">
            <summary>
            Convert whether object is null to Visibility.
            </summary>
        </member>
        <member name="M:MonitorAware.Views.Converters.ObjectToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert whether object is null to Visibility.
            </summary>
            <param name="value">Source object</param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns>If not null, Visibility.Visible. If null, Visibility.Collapsed.</returns>
        </member>
        <member name="M:MonitorAware.Views.Converters.ObjectToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:MonitorAware.Views.ExtendedTheme">
            <summary>
            Theme for ExtendedWindow
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedTheme.Default">
            <summary>
            Default theme
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedTheme.Plain">
            <summary>
            Plain theme
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedTheme.Light">
            <summary>
            Light color theme
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedTheme.Dark">
            <summary>
            Dark color theme
            </summary>
        </member>
        <member name="T:MonitorAware.Views.ExtendedWindow">
            <summary>
            Per-Monitor DPI aware and customizable chrome Window
            </summary>
        </member>
        <member name="M:MonitorAware.Views.ExtendedWindow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.WindowHandler">
            <summary>
            Handler for <see cref="T:MonitorAware.Views.ExtendedWindow"/>
            </summary>
        </member>
        <member name="M:MonitorAware.Views.ExtendedWindow.OnApplyTemplate">
            <summary>
            OnApplyTemplate
            </summary>
        </member>
        <member name="M:MonitorAware.Views.ExtendedWindow.OnSourceInitialized(System.EventArgs)">
            <summary>
            OnSourceInitialized
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MonitorAware.Views.ExtendedWindow.OnStateChanged(System.EventArgs)">
            <summary>
            OnStateChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MonitorAware.Views.ExtendedWindow.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            OnClosing
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MonitorAware.Views.ExtendedWindow.OnClosed(System.EventArgs)">
            <summary>
            OnClosed
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.ChromeOutmostBorder">
            <summary>
            Window chrome outmost border (private use only)
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.ChromeGrid">
            <summary>
            Window chrome grid
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.ChromeBorder">
            <summary>
            Window chrome border
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.ChromeContentGrid">
            <summary>
            Window chrome content grid
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.TitleBarBackGrid">
            <summary>
            Title bar back grid
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.TitleBarGrid">
            <summary>
            Title bar grid
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.TitleBarIcon">
            <summary>
            Title bar icon (private use only)
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.TitleBarOptionGrid">
            <summary>
            Title bar option grid
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.TitleBarCaptionButtonsPanel">
            <summary>
            Title bar caption buttons' panel (private use only)
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.WindowContentBorder">
            <summary>
            Window content border
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.Theme">
            <summary>
            Window theme out of ExtendedTheme
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.ThemeProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.Theme"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.ThemeUri">
            <summary>
            Window theme Uri
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.ThemeUriProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.ThemeUri"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.IsMinimizeVisible">
            <summary>
            Whether minimize button is visible
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.IsMinimizeVisibleProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.IsMinimizeVisible"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.IsMaximizeVisible">
            <summary>
            Whether maximize button is visible
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.IsMaximizeVisibleProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.IsMaximizeVisible"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.IsRestoreVisible">
            <summary>
            Whether restore button is visible
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.IsRestoreVisibleProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.IsRestoreVisible"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.KeepsTitleContentMargin">
            <summary>
            Whether to keep title and content margin even when a Window is maximized
            </summary>
            <remarks>False by OS's default.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.KeepsTitleContentMarginProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.KeepsTitleContentMargin"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.BlendsCaptionButtonVisualStyle">
            <summary>
            Whether to blend colors for caption buttons' visual style with their normal color
            </summary>
            <remarks>This blending is for the case the colors are translucent.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.BlendsCaptionButtonVisualStyleProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.BlendsCaptionButtonVisualStyle"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.UsesDefaultChromeBackground">
            <summary>
            Whether to use OS's default chrome background
            </summary>
            <remarks>Default value must be false to execute initial check.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.UsesDefaultChromeBackgroundProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.UsesDefaultChromeBackground"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.DefaultChromeBackground">
            <summary>
            OS's default chrome background Brush when a Window is activated (public readonly)
            </summary>
            <remarks>Default value (SystemColors.ActiveCaptionBrush) is merely for fall back.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.DefaultChromeBackgroundPropertyKey">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.DefaultChromeBackground"/>
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.DefaultChromeBackgroundProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.DefaultChromeBackground"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.ChromeBackground">
            <summary>
            Chrome background Brush when a Window is activated
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.ChromeBackgroundProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.ChromeBackground"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.ChromeForeground">
            <summary>
            Chrome foreground Brush when a Window is activated
            </summary>
            <remarks>Black by OS's default.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.ChromeForegroundProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.ChromeForeground"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.ChromeDeactivatedBackground">
            <summary>
            Chrome background Brush when a Window is deactivated
            </summary>
            <remarks>Default value (#FFebebeb) is for OS's default.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow._deactivatedBackground">
            <summary>
            Default value of <see cref="P:MonitorAware.Views.ExtendedWindow.ChromeDeactivatedBackground"/>
            </summary>
            <remarks>This value seems to have to be defined before dependency property.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.ChromeDeactivatedBackgroundProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.ChromeDeactivatedBackground"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.ChromeDeactivatedForeground">
            <summary>
            Chrome foreground Brush when a Window is deactivated
            </summary>
            <remarks>Black by OS's default.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.ChromeDeactivatedForegroundProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.ChromeDeactivatedForeground"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.ChromeBorderThickness">
            <summary>
            Chrome border thickness (chrome outer border)
            </summary>
            <remarks>1 by OS's default.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.ChromeBorderThicknessProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.ChromeBorderThickness"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.ChromeBorderBrush">
            <summary>
            Chrome border Brush
            </summary>
            <remarks>Default value (#3C000000) is for reproducing OS's default.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow._chromeBorderBrush">
            <summary>
            Default value of <see cref="P:MonitorAware.Views.ExtendedWindow.ChromeBorderBrush"/>
            </summary>
            <remarks>This value seems to have to be defined before dependency property.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.ChromeBorderBrushProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.ChromeBorderBrush"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.TitleBarBackground">
            <summary>
            Title bar background Brush
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.TitleBarBackgroundProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.TitleBarBackground"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.TitleBarNormalHeight">
            <summary>
            Title bar height when a Window is other than maximized
            </summary>
            <remarks>This height includes neither chrome outer border thickness nor chrome inner border thickness. 
            By OS's default, title bar height (when a window is maximized) will be sum of 
            SystemParameters.WindowResizeBorderThickness.Top and SystemParameters.WindowNonClientFrameThickness.Top
            which includes chrome border thickness.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.TitleBarNormalHeightProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.TitleBarNormalHeight"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.TitleBarMaximizedHeight">
            <summary>
            Title bar height when a Window is maximized
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.TitleBarMaximizedHeightProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.TitleBarMaximizedHeight"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.TitleBarPaddingLeft">
            <summary>
            Title bar padding at the left side
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.TitleBarPaddingLeftProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.TitleBarPaddingLeft"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.TitleBarPaddingRight">
            <summary>
            Title bar padding at the right side
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.TitleBarPaddingRightProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.TitleBarPaddingRight"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.IconSize">
            <summary>
            Size of icon (Window.Icon) in title bar
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.IconSizeProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.IconSize"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.TitleAlignment">
            <summary>
            Alignment of title (Window.Title) in title bar
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.TitleAlignmentProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.TitleAlignment"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.TitleFontSize">
            <summary>
            Font size of title (Window.Title) in title bar
            </summary>
            <remarks>Default value (14) is for OS's default.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.TitleFontSizeProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.TitleFontSize"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.ContentMargin">
            <summary>
            Content (Window.Content) margin 
            </summary>
            <remarks>Default value (6,0,6,6) is for reproducing OS's default.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.ContentMarginProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.ContentMargin"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.ContentBorderThickness">
            <summary>
            Content border thickness (chrome inner border)
            </summary>
            <remarks>1 by OS's default.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.ContentBorderThicknessProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.ContentBorderThickness"/>
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.ContentBorderBrush">
            <summary>
            Content border Brush
            </summary>
            <remarks>Default value is the same as that of ChromeBorderBrush.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow.ContentBorderBrushProperty">
            <summary>
            Dependency property for <see cref="P:MonitorAware.Views.ExtendedWindow.ContentBorderBrush"/>
            </summary>
        </member>
        <member name="M:MonitorAware.Views.ExtendedWindow.AdjustLayout">
            <summary>
            Adjust layout of Window parts.
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow._isDueCheckBackground">
            <summary>
            Whether checking background is due.
            </summary>
            <remarks>Default value must be true to execute initial check.</remarks>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow._isDueCheckDefaultChromeBackground">
            <summary>
            Whether checking default chrome background is due.
            </summary>
        </member>
        <member name="F:MonitorAware.Views.ExtendedWindow._chromeBackgroundActual">
            <summary>
            Chrome background color to be actually used
            </summary>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.CaptionButtonBackground">
            <summary>
            Caption button background Brush (internal)
            </summary>
            <remarks>For binding only between code behind.</remarks>
        </member>
        <member name="P:MonitorAware.Views.ExtendedWindow.IsAboutActive">
            <summary>
            Whether a Window is about to be activated (internal)
            </summary>
            <remarks>
            <para>This property will be changed when the Window is about to be activated or deactivated.</para>
            <para>For binding only between code behind.</para>
            </remarks>
        </member>
        <member name="T:MonitorAware.Views.MonitorAwareBehavior">
            <summary>
            Behavior to make a <see cref="T:System.Windows.Window"/> Per-Monitor DPI aware
            </summary>
        </member>
        <member name="M:MonitorAware.Views.MonitorAwareBehavior.OnAttached">
            <summary>
            OnAttached
            </summary>
        </member>
        <member name="M:MonitorAware.Views.MonitorAwareBehavior.OnDetaching">
            <summary>
            OnDetaching
            </summary>
        </member>
        <member name="P:MonitorAware.Views.MonitorAwareBehavior.WindowHandler">
            <summary>
            Handler for <see cref="T:System.Windows.Window"/>
            </summary>
        </member>
        <member name="T:MonitorAware.Views.MonitorAwareProperty">
            <summary>
            Attached property to make a <see cref="T:System.Windows.Window"/> Per-Monitor DPI aware
            </summary>
        </member>
        <member name="M:MonitorAware.Views.MonitorAwareProperty.CreateInstanceCore">
            <summary>
            Implement <see cref="M:System.Windows.Freezable.CreateInstanceCore">Freezable.CreateInstanceCore</see>.
            </summary>
            <returns>New Freezable</returns>
        </member>
        <member name="M:MonitorAware.Views.MonitorAwareProperty.GetAttachedProperty(System.Windows.Window)">
            <summary>
            Get AttachedProperty.
            </summary>
            <param name="window">Owner <see cref="T:System.Windows.Window"/></param>
            <returns>AttachedProperty</returns>
        </member>
        <member name="M:MonitorAware.Views.MonitorAwareProperty.SetAttachedProperty(System.Windows.Window,MonitorAware.Views.MonitorAwareProperty)">
            <summary>
            Set AttachedProperty.
            </summary>
            <param name="window">Owner <see cref="T:System.Windows.Window"/></param>
            <param name="attachedProperty">AttachedProperty</param>
        </member>
        <member name="F:MonitorAware.Views.MonitorAwareProperty.AttachedPropertyProperty">
            <summary>
            Attached property for AttachedProperty
            </summary>
        </member>
        <member name="P:MonitorAware.Views.MonitorAwareProperty.WindowHandler">
            <summary>
            Handler for <see cref="T:System.Windows.Window"/>
            </summary>
        </member>
        <member name="T:MonitorAware.Views.MonitorAwareWindow">
            <summary>
            Per-Monitor DPI aware window
            </summary>
        </member>
        <member name="P:MonitorAware.Views.MonitorAwareWindow.WindowHandler">
            <summary>
            Handler for <see cref="T:System.Windows.Window"/>
            </summary>
        </member>
        <member name="M:MonitorAware.Views.MonitorAwareWindow.OnSourceInitialized(System.EventArgs)">
            <summary>
            OnSourceInitialized
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MonitorAware.Views.MonitorAwareWindow.OnClosed(System.EventArgs)">
            <summary>
            OnClosed
            </summary>
            <param name="e"></param>
        </member>
    </members>
</doc>
